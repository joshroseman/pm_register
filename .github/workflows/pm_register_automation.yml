name: PM Register Automation

on:
  push:
    paths:
      - '**.csv'
  schedule:
    - cron: '0 9 * * 1' # Run every Monday at 9:00 AM
  workflow_dispatch: # Allow manual triggering

jobs:
  validate_data:
    name: Validate PM Register Data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy
          
      - name: Validate CSV structure
        run: |
          python -c "
          import pandas as pd
          import sys
          
          # Load the CSV file
          try:
              df = pd.read_csv('final_task_register.csv')
              print(f'Successfully loaded CSV with {len(df)} rows')
              
              # Check for required columns
              required_columns = ['TaskID', 'TaskName', 'TaskDescription', 'Assignee', 'Initiative']
              missing_columns = [col for col in required_columns if col not in df.columns]
              
              if missing_columns:
                  print(f'Error: Missing required columns: {missing_columns}')
                  sys.exit(1)
                  
              # Check for empty task names or descriptions
              empty_tasks = df[df['TaskName'].isna() | df['TaskName'] == '']
              if not empty_tasks.empty:
                  print(f'Warning: Found {len(empty_tasks)} tasks with empty names')
                  
              # Check for duplicate task IDs
              duplicates = df[df.duplicated('TaskID', keep=False)]
              if not duplicates.empty:
                  print(f'Error: Found {len(duplicates)} duplicate task IDs')
                  sys.exit(1)
                  
              print('Validation completed successfully')
              
          except Exception as e:
              print(f'Error validating CSV: {e}')
              sys.exit(1)
          "
  
  generate_report:
    name: Generate Status Report
    runs-on: ubuntu-latest
    needs: validate_data
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy matplotlib
          
      - name: Generate status report
        run: |
          python -c "
          import pandas as pd
          import matplotlib.pyplot as plt
          import os
          
          # Create reports directory
          os.makedirs('reports', exist_ok=True)
          
          # Load the CSV file
          df = pd.read_csv('final_task_register.csv')
          
          # Generate initiative distribution report
          initiative_counts = df['Initiative'].value_counts()
          
          # Write summary to markdown file
          with open('reports/status_report.md', 'w') as f:
              f.write('# PM Register Status Report\n\n')
              f.write(f'Generated on: {pd.Timestamp.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\n\n')
              f.write(f'Total tasks: {len(df)}\n\n')
              
              f.write('## Initiative Distribution\n\n')
              f.write('| Initiative | Task Count |\n')
              f.write('|------------|------------|\n')
              for initiative, count in initiative_counts.items():
                  f.write(f'| {initiative} | {count} |\n')
              
              f.write('\n## Recent Updates\n\n')
              # This would typically show recent changes based on git history
              f.write('*This section would show recent changes based on git history*\n\n')
              
              f.write('## Upcoming Deadlines\n\n')
              f.write('*This section would show tasks with upcoming deadlines*\n\n')
          
          print('Status report generated successfully')
          "
          
      - name: Upload report artifact
        uses: actions/upload-artifact@v3
        with:
          name: status-report
          path: reports/
  
  notify_slack:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: generate_report
    if: github.event_name != 'pull_request'
    steps:
      - name: Download report artifact
        uses: actions/download-artifact@v3
        with:
          name: status-report
          path: reports/
          
      - name: Send notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # This would be replaced with an actual Slack webhook URL
          payload: |
            {
              "text": "PM Register Update",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "PM Register Weekly Update"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The PM register has been updated. View the latest status report for details."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*<${{ github.server_url }}/${{ github.repository }}|View Repository>*"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
